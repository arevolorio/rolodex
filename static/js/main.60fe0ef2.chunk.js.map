{"version":3,"sources":["components/search-box/search-box.jsx","components/card-component/card-component.jsx","components/card-list/card-list.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","type","className","onChange","Card","props","user","name","email","CardList","users","map","key","id","App","e","setState","searchField","target","value","state","fetch","then","response","json","jsonUsers","this","filteredUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6TAGaA,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIC,KAAK,OACLC,UAAU,aACVH,YAAaA,EACbI,SAAWH,MCJNI,G,MAAO,SAACC,GAAD,OAChB,yBAAKH,UAAU,kBACX,4BAAKG,EAAMC,KAAKC,MAChB,2BAAIF,EAAMC,KAAKE,UCFVC,G,MAAW,SAAAJ,GACpB,OAAO,yBAAKH,UAAU,aAEdG,EAAMK,MAAMC,KAAI,SAAAL,GAAI,OAAI,kBAAC,EAAD,CAAMM,IAAKN,EAAKO,GAAIP,KAAMA,UCiC/CQ,G,kBAnCb,aAAe,IAAD,8BACZ,+CAaFd,aAAe,SAAAe,GACb,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXV,MAAO,GACPO,YAAc,IAJJ,E,iFAQO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,OAAI,EAAKT,SAAS,CAACN,MAAQe,S,+BAOlC,IAAD,EACuBC,KAAKN,MAA3BV,EADD,EACCA,MAAOO,EADR,EACQA,YACTU,EAAgBjB,EAAMkB,QAAO,SAAAtB,GAAI,OAAKA,EAAKC,KAAKsB,cAAeC,SAASb,EAAYY,kBAC1F,OACE,yBAAK3B,UAAU,OACb,wBAAIA,UAAU,SAAd,WACA,uBAAGA,UAAU,YAAb,4CACA,kBAAC,EAAD,CACEH,YAAc,eACdC,aAAiB0B,KAAK1B,eAExB,kBAAC,EAAD,CAAUU,MAAOiB,S,GA9BPI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.60fe0ef2.chunk.js","sourcesContent":["import React from 'react';\nimport './search-box.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n        type='text'\n        className=\"search-box\" \n        placeholder={placeholder}\n        onChange={ handleChange }\n    />\n)","import React from 'react';\n\nimport './card-component.css';\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <h1>{props.user.name}</h1>\n        <p>{props.user.email}</p>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card-component/card-component';\n\nimport './card-list.css';\n\nexport const CardList = props => {\n    return <div className=\"card-list\">\n        {\n            props.users.map(user => <Card key={user.id} user={user}></Card>)\n        }\n    </div>\n};","import React, { Component } from 'react';\nimport { SearchBox } from './components/search-box/search-box';\nimport { CardList } from './components/card-list/card-list';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      users: [],\n      searchField : ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(jsonUsers => this.setState({users : jsonUsers}))\n  }\n\n  handleChange = e => {\n    this.setState({searchField : e.target.value})\n  }\n\n  render() {\n    const { users, searchField} = this.state;\n    const filteredUsers = users.filter(user => (user.name.toLowerCase()).includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Rolodex</h1>\n        <p className=\"subtitle\">by Allan Francisco Revolorio - Developer</p>\n        <SearchBox \n          placeholder = \"Search users\"\n          handleChange = { this.handleChange }\n        />  \n        <CardList users={filteredUsers}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}